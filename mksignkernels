#!/usr/bin/make -f

# Copyright (c) 2018 Anton Semjonov
# Licensed under the MIT License

# ------- settings --------

# make settings
SHELL := /bin/bash
SELFP := $(abspath $(lastword $(MAKEFILE_LIST)))
SELF  := make -f $(SELFP) --no-print-directory

# required stub file
EFISTUB = /usr/lib/systemd/boot/efi/linuxx64.efi.stub

# signing keys
PKI  = /etc/efikeys
KEY  = $(PKI)/DatabaseKey.key
CERT = $(PKI)/DatabaseKey.crt

# directories
BOOT = /boot
ESP  = $(BOOT)/efi
OUT  = $(ESP)/EFI/Linux

# what's needed for a single kernel
ID        = $*
KERNEL    = $(BOOT)/vmlinuz-$(if $*,$*,%)
MICROCODE = $(BOOT)/intel-ucode.img
INITRAMFS = $(MICROCODE) $(BOOT)/initramfs-$(if $*,$*,%).img
SIGNED    = $(OUT)/vmlinuz-$*.efi
CMDLINE   = quiet

# static osrelease info
#OSREL     = /etc/os-release

# dynamic osrelease info
TIMESTAMP = $(shell date --utc +%FT%H%M%SZ)
KERNELVER = $(shell file $(KERNEL) | sed 's/.* version \([^ ]\+\) .*/\1/')
OSNAME    = $(shell source /etc/os-release && echo "$$PRETTY_NAME")
OSREL     = <(printf '%s=\"%s\"\n' PRETTY_NAME '$(OSNAME)' ID '$(ID)' VERSION_ID '$(KERNELVER)' BUILD_ID '$(TIMESTAMP)')

# search for kernels / hook targets
FOUNDKERNELS = $(addprefix kernel-,$(shell ls $(BOOT)/vmlinuz-* | sed 's/.*\/vmlinuz-//'))
HOOKTARGETS  = boot/vmlinuz-(.*)

# -------- targets --------
.DEFAULT_GOAL := kernels

# default configuration for a single kernel
.PHONY: kernel-%
kernel-% :
	@$(SELF) $(SIGNED) \
		EFISTUB="$(EFISTUB)" \
		OSREL="$(OSREL)" \
		KEY="$(KEY)" \
		CERT="$(CERT)" \
		KERNEL="$(KERNEL)" \
		INITRAMFS="$(INITRAMFS)" \
		CMDLINE="$(CMDLINE)"

# include any custom settings / targets
-include /etc/mksignkernels.mk
-include ./mksignkernels.mk

# this is the "make all" that will build custom and found kernels
.PHONY: kernels
kernels: $(CUSTOMKERNELS) $(FOUNDKERNELS)

# hook mode for pacman, reads targets from stdin
.PHONY: hook
hook:
	@while read target; do \
	  if [[ $$target =~ $(HOOKTARGETS) ]]; then \
	    $(SELF) kernel-$${BASH_REMATCH[1]}; \
	  else FORCEALL=yes; fi \
	done; \
	if [[ $$FORCEALL == yes ]]; then \
	  $(SELF) kernels; \
	fi

# bundle and sign a kernel binary
$(OUT)/vmlinuz-%.efi : $(EFISTUB) $(KEY) $(CERT) $(KERNEL) $(INITRAMFS)
	objcopy "$(EFISTUB)" "$@.new" \
	  --add-section        .osrel=$(OSREL) \
	  --change-section-vma .osrel=0x0020000 \
	  --add-section        .cmdline=<(printf '%s' '$(CMDLINE)') \
	  --change-section-vma .cmdline=0x0030000 \
	  --add-section        .linux="$(KERNEL)" \
	  --change-section-vma .linux=0x2000000 \
	  --add-section        .initrd=<(cat $(INITRAMFS)) \
	  --change-section-vma .initrd=0x3000000
	sbsign --key "$(KEY)" --cert "$(CERT)" \
		--output "$@.new" "$@.new"
	mv -b "$@.new" "$@"

# sign a single binary, SIGN=... required
.PHONY: sign
sign:
	@[[ -n "$(SIGN)" ]] || { echo "SIGN=... argument required"; exit 1; }
	sbverify --cert "$(CERT)" "$(SIGN)" || \
	sbsign --key "$(KEY)" --cert "$(CERT)" --output "$(SIGN)" "$(SIGN)"

